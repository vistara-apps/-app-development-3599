name: Deploy to Vercel

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NODE_OPTIONS: --max-old-space-size=4096
        
    - name: Deploy to Vercel (Production)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      continue-on-error: true
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-args: '--prod'
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        
    - name: Deploy to Vercel (Preview)
      if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master'
      continue-on-error: true
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-args: '--no-wait'
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        
    - name: Comment PR with deployment URL
      if: github.event_name == 'pull_request'
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const latestDeployment = deployments[0];
            if (latestDeployment) {
              const deploymentUrl = `https://${latestDeployment.environment}.vercel.app`;
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `üöÄ **Preview Deployment Ready!**
                \n\nüì± **URL:** ${deploymentUrl}
                \n\nThis preview will be automatically updated when you push new commits to this PR.`
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `‚úÖ **Build Successful!**
                \n\nüèóÔ∏è The application built successfully.
                \n\n‚öôÔ∏è To enable Vercel deployment, configure the following repository secrets:
                \n- \`VERCEL_TOKEN\`
                \n- \`VERCEL_ORG_ID\`
                \n- \`VERCEL_PROJECT_ID\`
                \n\nOnce configured, future commits will automatically deploy to Vercel.`
              });
            }
          } catch (error) {
            console.log('Could not post deployment URL:', error.message);
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ **Build Successful!**
              \n\nüèóÔ∏è The application built successfully but deployment was skipped.
              \n\n‚öôÔ∏è To enable Vercel deployment, configure the following repository secrets:
              \n- \`VERCEL_TOKEN\`
              \n- \`VERCEL_ORG_ID\`
              \n- \`VERCEL_PROJECT_ID\`
              \n\nOnce configured, future commits will automatically deploy to Vercel.`
            });
          }
